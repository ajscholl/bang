module Test.Functions

function foo(x, y, z): Int = do
    let a = x + z
    let b = a - y
    return b

function bar(x: Int, y: Double): Int = do
    if y > 0 then do
        return x - 1
    return x + 1

function baz(x: Int) = do
    return foo x x

function mkVal(): Int = do
    return baz 3 5

function mixed(x, y: Bool) = do
    if x then do
        return y
    return x

function withRet(x, y): Bool = do
    return mixed y x

function withStrings(a, b) = do
    return a ++ "abc" "def"
        "hij" ++ b "asd\n\tääßð"

--primitive datatype [] a

type List a = Cons { head : a, tail : List a } | Nil

function length(xs: List a): Int = do
    return case xs of
        Nil       -> 0
        Cons _ xs -> 1 + length xs

function length2(xs: List a): Int = do
    case xs of
        Nil       -> return 0
        Cons _ xs -> return 1 + length2 xs

--primitive function runST(st: forall s . ST s a): a

type Tuple a b = Tuple { fst: a, snd: b }

function curry(f: Tuple a b -> c, a: a, b: b): c = do
    return f (Tuple a b)

function unrurry(f: a -> b -> c, ab: Tuple a b): c = do
    return case ab of
        Tuple a b -> f a b

function long(): Int = do
    let x = 1 + 1 + 1 + 1 + 1 + 1 +
        1 + 1 + 1
        + 1 + 1 + 1
    let y = x +
     x +
                x +
                    x +
                        x
    return y
